package murmur3

import (
	"encoding/binary"
	"hash"
	"reflect"
	"testing"
)

var golden32 = [][]byte{
	[]byte{0x51, 0x4e, 0x28, 0xb7},
	[]byte{0x58, 0x8a, 0xdc, 0xe8},
	[]byte{0xb8, 0x07, 0x9b, 0x46},
	[]byte{0xaa, 0x75, 0xe9, 0xff},
	[]byte{0x9b, 0xf5, 0x45, 0x92},
	[]byte{0xff, 0xac, 0xb1, 0x1b},
	[]byte{0xdc, 0xec, 0x56, 0x0f},
	[]byte{0xfe, 0xa9, 0x7f, 0x80},
	[]byte{0x35, 0x09, 0x8a, 0xba},
	[]byte{0x72, 0xde, 0xb1, 0xd0},
	[]byte{0x28, 0x90, 0xdc, 0x18},
	[]byte{0x75, 0x6c, 0xd6, 0x1e},
}

var golden128 = [][]byte{
	[]byte{0x6e, 0xff, 0x5c, 0xb5, 0x46, 0x10, 0xab, 0xe5, 0x78, 0xf8, 0x35, 0x83, 0x51, 0x62, 0x2d, 0xaa},
	[]byte{0x37, 0x48, 0xcf, 0x70, 0x47, 0xea, 0xe1, 0x07, 0xd2, 0xed, 0x37, 0x28, 0x6b, 0xe0, 0x51, 0x8a},
	[]byte{0x68, 0xf5, 0x94, 0x8c, 0x93, 0x70, 0xe9, 0x84, 0x3f, 0x63, 0xc7, 0x69, 0xe6, 0x2a, 0x56, 0x36},
	[]byte{0x9a, 0x8a, 0x61, 0xf0, 0x9c, 0x88, 0xbe, 0x4e, 0xf3, 0x1b, 0x25, 0x6c, 0xca, 0x12, 0xc8, 0x8b},
	[]byte{0x77, 0xff, 0xba, 0x4b, 0x53, 0xb0, 0xed, 0xab, 0x2e, 0x3a, 0xb5, 0x77, 0x91, 0xc0, 0x87, 0xf9},
	[]byte{0xb7, 0x1b, 0x9d, 0xbb, 0x2d, 0x3c, 0x56, 0xe0, 0x98, 0xf0, 0xa4, 0x3b, 0x38, 0x30, 0xb9, 0xed},
	[]byte{0x27, 0x72, 0x9d, 0xc5, 0x97, 0x70, 0x8c, 0xea, 0xdf, 0xaa, 0xd4, 0xc9, 0x1f, 0x94, 0x1b, 0xc6},
	[]byte{0x71, 0xf7, 0x72, 0x63, 0x2c, 0xa0, 0xaf, 0x1d, 0xd6, 0xf9, 0xb4, 0x6a, 0xe9, 0x3d, 0xe3, 0x12},
	[]byte{0xc1, 0x0b, 0xb1, 0x4e, 0x16, 0xc0, 0x8f, 0xf0, 0x5b, 0x7b, 0x07, 0x2d, 0x65, 0xdf, 0x72, 0x2c},
	[]byte{0x31, 0xb9, 0x0d, 0xd1, 0xdc, 0xce, 0xa8, 0x5d, 0x4c, 0xa1, 0x1d, 0x09, 0xdf, 0xd5, 0x30, 0xe6},
	[]byte{0x90, 0x39, 0x0c, 0xba, 0x34, 0xf2, 0x3d, 0x9c, 0xbe, 0x78, 0x1b, 0x0b, 0x9e, 0xaf, 0x4a, 0xfa},
	[]byte{0x2c, 0x93, 0xf7, 0x02, 0x2e, 0xf5, 0xa0, 0xb9, 0x87, 0x0f, 0x99, 0xd9, 0x14, 0xc9, 0xdb, 0x43},
}

var inputText = [][]byte{
	[]byte(""),
	[]byte("a"),
	[]byte("ab"),
	[]byte("abc"),
	[]byte("abcd"),
	[]byte("abcde"),
	[]byte("abcdef"),
	[]byte("abcdefg"),
	[]byte("abcdefgh"),
	[]byte("abcdefghi"),
	[]byte("abcdefghij"),
	[]byte("Discard medicine more than two years old."),
}

func TestChecksum32(t *testing.T) {
	f := func(b []byte) []byte {
		h := Checksum32(b, 1)
		r := [4]byte{}
		binary.BigEndian.PutUint32(r[:], h)
		return r[:]
	}
	checksumTest(t, f, golden32)
}

func TestChecksum128(t *testing.T) {
	f := func(b []byte) []byte {
		h1, h2 := Checksum128(b, 1)
		r := [16]byte{}
		binary.BigEndian.PutUint64(r[:8], h1)
		binary.BigEndian.PutUint64(r[8:], h2)
		return r[:]
	}
	checksumTest(t, f, golden128)
}

func checksumTest(t *testing.T, f func([]byte) []byte, expected [][]byte) {
	for i, expect := range expected {
		result := f(inputText[i])
		if !reflect.DeepEqual(expect, result) {
			t.Fatalf("%d | expected %x got %x", i, expect, result)
		}
	}
}

func TestHash32(t *testing.T) {
	h := New32(1)
	hashTest(t, h, golden32)
}

func TestHash128(t *testing.T) {
	h := New128(1)
	hashTest(t, h, golden128)
}

func hashTest(t *testing.T, h hash.Hash, expected [][]byte) {
	for i, expect := range expected {
		text := inputText[i]

		h.Reset()
		h.Write(text)
		result1 := h.Sum(nil)
		if !reflect.DeepEqual(expect, result1) {
			t.Fatalf("%d | expected %x got %x", i, expect, result1)
		}

		h.Reset()
		for j := 0; j < len(text); j += 2 {
			if j+2 >= len(text) {
				h.Write(text[j:])
			} else {
				h.Write(text[j : j+2])
			}
		}
		result2 := h.Sum(nil)
		if !reflect.DeepEqual(expect, result2) {
			t.Fatalf("%d | expected %x got %x", i, expect, result2)
		}
	}
}

func BenchmarkChecksum32(b *testing.B) {
	f := func(data []byte) {
		Checksum32(data, 1)
	}
	doBenchmark(b, f)
}

func BenchmarkChecksum128(b *testing.B) {
	f := func(data []byte) {
		Checksum128(data, 1)
	}
	doBenchmark(b, f)
}

func BenchmarkHashing32(b *testing.B) {
	h := New32(1)
	f := func(data []byte) {
		h.Reset()
		h.Write(data)
		h.Sum(nil)
	}
	doBenchmark(b, f)
}

func BenchmarkHashing128(b *testing.B) {
	h := New128(1)
	f := func(data []byte) {
		h.Reset()
		h.Write(data)
		h.Sum(nil)
	}
	doBenchmark(b, f)
}

func doBenchmark(b *testing.B, f func([]byte)) {
	b.SetBytes(1024)
	data := make([]byte, 1024)
	for i := range data {
		data[i] = byte(i)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		f(data)
	}
}
